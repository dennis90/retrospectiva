// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Board         Board[]
  Vote          Vote[]
  Card          Card[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id              String        @id @default(cuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  owner           User          @relation(fields: [ownerId], references: [id])
  ownerId         String
  maxVotesPerUser Int
  enableVoting    Boolean
  hideVotes       Boolean
  hideCards       Boolean
  isPublic        Boolean
  boardPassword   String?
  BoardColumn     BoardColumn[]
  Card            Card[]
}

model BoardColumn {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  Card      Card[]
  color    String
}

model Card {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  owner     User        @relation(fields: [ownerId], references: [id])
  ownerId   String
  board     Board       @relation(fields: [boardId], references: [id])
  boardId   String
  column    BoardColumn @relation(fields: [columnId], references: [id])
  columnId  String
  votes     Vote[]
  giphyUrl  String?
  Comment   Comment[]
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  text      String
}
